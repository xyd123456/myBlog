(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{364:function(s,t,a){"use strict";a.r(t);var n=a(42),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"一元操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一元操作符"}},[s._v("#")]),s._v(" 一元操作符")]),s._v(" "),a("p",[s._v("只有一个值得操作符叫一元操作符。")]),s._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"z"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" f "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" o "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\ns1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//值变为数值3 如果字符串可以转为数字先变为数字再++")]),s._v("\ns2"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//NaN")]),s._v("\nb"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//等于0++  结果为1")]),s._v("\nf"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//0.10000000009（因为浮点数不精确）")]),s._v("\no"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//-2 回去valueOf（）方法的值")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("s3 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//NaN")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("s3 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//NaN")]),s._v("\n")])])]),a("h2",{attrs:{id:"位操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位操作符"}},[s._v("#")]),s._v(" 位操作符")]),s._v(" "),a("p",[s._v("操作符用于数值的底层操作，位操作并不直接应用到64位表示，而是先把值转换为32位整数，再进行位操作，之后再把结果转换为64位。")]),s._v(" "),a("p",[s._v("有符号整数使用32位的前31位表示整数值，第32位表示数值的符号，如0表示正，1表示负，这一位称为符号位。")]),s._v(" "),a("p",[s._v("比如18的二进制格式为0000000000000000000000000000010010")]),s._v(" "),a("p",[s._v("负值是以一种称为二补数（或补码）的二进制编码储存，通过三个步骤获得：")]),s._v(" "),a("ol",[a("li",[s._v("确定绝对值得二进制表示（如，对于-18，先确定18的二进制表示）")]),s._v(" "),a("li",[s._v("找到数值的一补数（或反码），换句话说，就是每个0都变成1，每个1都变成0")]),s._v(" "),a("li",[s._v("给结果加1")])]),s._v(" "),a("p",[s._v("基于上步骤给确定-18的二进制表示，先从18的二进制表示开始：")]),s._v(" "),a("p",[s._v("0000 0000 0000 0000 0000 0000 0001 0010")]),s._v(" "),a("p",[s._v("然后计算补数，即反转每一位的二进制值：")]),s._v(" "),a("p",[s._v("1111 1111 1111 1111 1111 1111 1110 1101")]),s._v(" "),a("p",[s._v("最后给补数加1：")]),s._v(" "),a("p",[s._v("1111 1111 1111 1111 1111 1111 1110 1110")]),s._v(" "),a("p",[s._v("那么-18的二进制表示就是")]),s._v(" "),a("p",[s._v("1111 1111 1111 1111 1111 1111 1110 1110")]),s._v(" "),a("p",[s._v("要注意的是，在处理有符号整数时，我们无法访问第31位。")]),s._v(" "),a("p",[s._v("一般默认情况下所有整数都有符号数。不过，确实存在无符号整数。对无符号整数来说，第32位不表示符号，因为只有正值。无符号整数比有符号整数的范围更大，因为符号位被用来表示数值了。")]),s._v(" "),a("p",[s._v("特殊值NaN和Infinity在位操作中都会被当成0处理。")]),s._v(" "),a("h3",{attrs:{id:"按位非"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#按位非"}},[s._v("#")]),s._v(" 按位非～")]),s._v(" "),a("p",[s._v("它的作用是返回数值的一补数")]),s._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" num1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//二进制      00000000000000000000000000011001")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" num2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),s._v("num1 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//二进制   11111111111111111111111111100110")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//-26 计算结果和-num1 - 1相等 但位运算更快")]),s._v("\n")])])]),a("h3",{attrs:{id:"按位与"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#按位与"}},[s._v("#")]),s._v(" 按位与&")]),s._v(" "),a("p",[s._v("两个位都是1时返回1，在任何一位是0时返回0")]),s._v(" "),a("p",[s._v("25 = 0000 0000 0000 0000 0000 0000 0001 1001")]),s._v(" "),a("p",[s._v("3 = 0000 0000 0000 0000 0000 0000 0000 0011")]),s._v(" "),a("p",[s._v("& = 0000 0000 0000 0000 0000 0000 0000 0001")]),s._v(" "),a("h3",{attrs:{id:"按位或"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#按位或"}},[s._v("#")]),s._v(" 按位或|")]),s._v(" "),a("p",[s._v("至少一位是1时返回1，两位都是0时返回0")]),s._v(" "),a("p",[s._v("25 = 0000 0000 0000 0000 0000 0000 0001 1001")]),s._v(" "),a("p",[s._v("3 = 0000 0000 0000 0000 0000 0000 0000 0011")]),s._v(" "),a("p",[s._v("& = 0000 0000 0000 0000 0000 0000 0001 1011")]),s._v(" "),a("h3",{attrs:{id:"按位异或"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#按位异或"}},[s._v("#")]),s._v(" 按位异或^")]),s._v(" "),a("p",[s._v("只在1位是1时返回1")]),s._v(" "),a("p",[s._v("25 = 0000 0000 0000 0000 0000 0000 0001 1001")]),s._v(" "),a("p",[s._v("3 = 0000 0000 0000 0000 0000 0000 0000 0011")]),s._v(" "),a("p",[s._v("& = 0000 0000 0000 0000 0000 0000 0001 1010")]),s._v(" "),a("h3",{attrs:{id:"左移"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#左移"}},[s._v("#")]),s._v(" 左移<<")]),s._v(" "),a("p",[s._v("会按照指定的位数将数值的所有位向左移动，往后面空位补对应个数的0。（左移会保留它所操作数值的符号）")]),s._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" oldValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//等于二进制10")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" newValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" oldValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//等于二进制1000000，即十进制64")]),s._v("\n")])])]),a("h3",{attrs:{id:"右移"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#右移"}},[s._v("#")]),s._v(" 右移>>")]),s._v(" "),a("p",[s._v("右移后空位会出现在左侧")]),s._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" oldValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//等于二进制1000000，即十进制64")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" newValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" oldValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//等于二进制10")]),s._v("\n")])])]),a("h3",{attrs:{id:"无符号右移"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无符号右移"}},[s._v("#")]),s._v(" 无符号右移>>>")]),s._v(" "),a("p",[s._v("会将数值的所有32位右移（包括操作数值的符号），因此如果是负数因为最开始的1被右移，数值会发生巨大的变化。")]),s._v(" "),a("h2",{attrs:{id:"布尔操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布尔操作符"}},[s._v("#")]),s._v(" 布尔操作符")]),s._v(" "),a("h3",{attrs:{id:"逻辑非"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑非"}},[s._v("#")]),s._v(" 逻辑非！")]),s._v(" "),a("p",[s._v("对象---false")]),s._v(" "),a("p",[s._v("空字符串---true")]),s._v(" "),a("p",[s._v("非空字符串---false")]),s._v(" "),a("p",[s._v("0---true")]),s._v(" "),a("p",[s._v("非0（包括infinity）---false")]),s._v(" "),a("p",[s._v("null --- true")]),s._v(" "),a("p",[s._v("NaN --- true")]),s._v(" "),a("p",[s._v("undefined --- true")]),s._v(" "),a("h3",{attrs:{id:"逻辑与"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑与"}},[s._v("#")]),s._v(" 逻辑与&&")]),s._v(" "),a("p",[s._v("如果第一个操作符是对象，返回第二个操作数。")]),s._v(" "),a("p",[s._v("如果第二个操作数是对象，则只有一个操作数求值为true才会返回该对象。")]),s._v(" "),a("p",[s._v("如果两个操作数都是对象，则返回第二个操作数。")]),s._v(" "),a("p",[s._v("如果一个操作数是null，则返回null。")]),s._v(" "),a("p",[s._v("如果一个操作数是NaN，则返回NaN。")]),s._v(" "),a("p",[s._v("如果一个操作数是undefined，则返回undefined。")]),s._v(" "),a("h3",{attrs:{id:"逻辑或"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑或"}},[s._v("#")]),s._v(" 逻辑或||")]),s._v(" "),a("p",[s._v("如果第一个操作数是对象，则返回第一个操作数。")]),s._v(" "),a("p",[s._v("如果第一个操作数求值为false，则返回第二个操作数。")]),s._v(" "),a("p",[s._v("如果两个操作数都是对象，则返回第一个操作数。")]),s._v(" "),a("p",[s._v("如果两个操作数都是null，则返回null。")]),s._v(" "),a("p",[s._v("如果两个操作都是NaN，则返回NaN。")]),s._v(" "),a("p",[s._v("如果两个操作数都是undefined，则返回undefined。")]),s._v(" "),a("h2",{attrs:{id:"指数操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指数操作符"}},[s._v("#")]),s._v(" 指数操作符")]),s._v(" "),a("p",[s._v("现在Math.pow()现在有了自己的操作符**")]),s._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[s._v("Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("**")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" squared "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\nsquared "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("**=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//有了自己的指数赋值操作符 **=")]),s._v("\n")])])]),a("h2",{attrs:{id:"关系操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关系操作符"}},[s._v("#")]),s._v(" 关系操作符")]),s._v(" "),a("p",[s._v("如果操作数都是数值，则执行数值比较。")]),s._v(" "),a("p",[s._v("如果操作数都是字符串，则逐个比较字符串中对应字符的编码。")]),s._v(" "),a("p",[s._v("如果有任一操作数是数值，则将另一个操作数转化为数值，执行数值比较。")]),s._v(" "),a("p",[s._v("如果有一操作符是数值，有一操作符是字符串，则将“a”转换为NaN，结果为false。")]),s._v(" "),a("p",[s._v("如果任一操作数是对象，则调用其valueOf（）方法，如果没有则调用toString（）方法。")]),s._v(" "),a("p",[s._v("如果有人以操作符是布尔值，则将其转换为数值再执行比较。")]),s._v(" "),a("h3",{attrs:{id:"相等操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相等操作符"}},[s._v("#")]),s._v(" 相等操作符")]),s._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"NaN"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("NaN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("NaN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("NaN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("NaN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("NaN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("NaN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"5"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//true")]),s._v("\n")])])]),a("h2",{attrs:{id:"逗号操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逗号操作符"}},[s._v("#")]),s._v(" 逗号操作符")]),s._v(" "),a("p",[s._v("逗号操作符可以用来一条语句执行多个操作。")]),s._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" num1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" num2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" num3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("在赋值时使用逗号操作符分隔值，最终会返回表达式中最有一个值：")]),s._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//num的值为0")]),s._v("\n")])])]),a("h2",{attrs:{id:"语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语句"}},[s._v("#")]),s._v(" 语句")]),s._v(" "),a("h3",{attrs:{id:"for-in语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-in语句"}},[s._v("#")]),s._v(" for-in语句")]),s._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" propName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tdocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("propName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("这个例子使用for-in循环显示了BOM对象window的所有属性。")]),s._v(" "),a("p",[s._v("如果for-in循环要迭代的变量是null或undefined，则不执行循环体。")]),s._v(" "),a("h3",{attrs:{id:"标签语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标签语句"}},[s._v("#")]),s._v(" 标签语句")]),s._v(" "),a("p",[s._v("标签语句用于给语句加标签，label：statement（这之中label是一个标签，可以在后面通过break或continue语句引用）")]),s._v(" "),a("p",[s._v("break语句用于立即退出循环，强制执行循环之后的下一条语句。")]),s._v(" "),a("p",[s._v("continue语句也用于立即退出循环，但会再次从循环顶部开始执行。")]),s._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\noutermost"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//break outermost 会立即结束outermost这个循环 结果为55")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//continue outermost 会立即结束outermost本次循环  结果为95")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        num"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("h3",{attrs:{id:"switch语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#switch语句"}},[s._v("#")]),s._v(" switch语句")]),s._v(" "),a("p",[s._v("以下为两个switch例子")]),s._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" world"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Greeting was found"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"goodbye"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Closing was found"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n       \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Unexpected message was found"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("swtich")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    \tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'less than 0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    \tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'0-10'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    \tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'10-20'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    \tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'>20'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v('注意：switch语句在保比较每个条件的值是会使用全等操作符，因此不会强制转换数据类型（比如，字符串"10"不等于数值10）')])])}),[],!1,null,null,null);t.default=r.exports}}]);