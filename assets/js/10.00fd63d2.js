(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{361:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"变量、作用域与内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量、作用域与内存"}},[t._v("#")]),t._v(" 变量、作用域与内存")]),t._v(" "),a("p",[t._v("变量可以包含两种不同类型的数据：原始值和引用值。原始值就是最简单的数据，引用值则是由多个值构成的对象。")]),t._v(" "),a("p",[t._v("保存原始值的变量是按值访问的，因为我们操作的就是存储在变量中的实际值。")]),t._v(" "),a("p",[t._v("引用值是保存在内存的对象。js不允许直接访问内存位置，因此也就不能直接操作对象所在的内存空间。在操作对象是，实际上操作的是对该对象的引用而非实际的对象本身。为此，保存引用值的变量是按引用访问的。")]),t._v(" "),a("h2",{attrs:{id:"动态属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态属性"}},[t._v("#")]),t._v(" 动态属性")]),t._v(" "),a("p",[t._v("对于引用值而言，可以随时添加、修改和删除其属性和方法。")]),t._v(" "),a("p",[t._v("在通过变量把一个原始值赋值到另一个变量是，原始值会被复制到新变量的位置。")]),t._v(" "),a("p",[t._v("复制的值实际上是一个指针，它指向存储在堆内存中的对象。操作完成后，两个变量实际上指向同一个对象，因此一个对象上面的变化会在另一个对象上反映出来。")]),t._v(" "),a("p",[t._v("在传递参数上，值会被复制到一个局部变量（即一个命名参数，或者用ECMAScript的话说，就是arguments对象的一个槽位）。如果变量中传递的是对象，就没有那么清楚了，因为对象保存在全局做作用域的堆内存上。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        str"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ok'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("num")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'no'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//num 不变还为10  obj改变 str变为no")]),t._v("\n")])])]),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//object")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//object")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//object")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//为知道具体是什么类型的对象，需要用到instanceof操作符 instanceof前面必须是一个对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//报错 因为instanceof前面需要是一个对象，而{}同时也是空代码段，js无法识别为空代码段还是一个对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("g "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),t._v(" \n")])])]),a("h2",{attrs:{id:"上下文和作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#上下文和作用域"}},[t._v("#")]),t._v(" 上下文和作用域")]),t._v(" "),a("p",[t._v("变量或函数的上下文决定了他们可以访问哪些数据，以及它们的行为。每个上下文都有一个关联的变量对象。")]),t._v(" "),a("p",[t._v("上下文中的代码在执行的时候，会创建变量对象的一个作用域链。如果上下文是函数，则其活动对象用作变量对象。活动对象最初只有一个定义变量：arguments。作用域链中的下一个变量对象来自包含上下文，在下一个对象来自再下一个包含上下文。以此类推知道全局上下文；全局上下文的变量对象始终是作用域链的最后一个变量对象。")]),t._v(" "),a("h3",{attrs:{id:"let"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let"}},[t._v("#")]),t._v(" let")]),t._v(" "),a("p",[t._v("let的作用于是块级的，if块、while块、function块，甚至连单独的块也是let声明变量的作用域。、")]),t._v(" "),a("p",[t._v("let与var的另一个不同指出是在同一作用域内不能声明两次。重复的var声明会被忽略，而重复的let声明会抛出SyntaxError。")]),t._v(" "),a("h3",{attrs:{id:"const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#const"}},[t._v("#")]),t._v(" const")]),t._v(" "),a("p",[t._v("使用const声明的变量必须同时初始化为某个值，一经声明，在其生命周期的任何时候都不能再重新赋予新值。")]),t._v(" "),a("p",[t._v("如果开发流程并不会因此而受到很大的影响，就应该尽可能地多使用const声明，除非确实需要一个将来会重新赋值的变量。这样可以从根本上保证提前发现重新赋值导致的bug。")]),t._v(" "),a("h2",{attrs:{id:"垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收"}},[t._v("#")]),t._v(" 垃圾回收")]),t._v(" "),a("p",[t._v("JavaScript是使用垃圾回收的语言，也就是说执行环境负责在代码执行时管理内存。JavaScript为开发者卸下了这个负担，通过自动内存管理实现内存分配和闲置资源回收。基本思路很简单：确定哪个变量不会再使用，然后释放它占用的内存。这个过程是周期性的，即垃圾回收程序每个一段时间（或者说在代码执行过程中某特预定的收集时间）就会自动运行。由于字符串、对象和数组没有固定大小，所有当他们的大小已知时，才能对他们进行动态的存储分配。JavaScript程序每次创建字符串、数组或对象时，解释器都必须分配内存来存储那个实体。只要像这样动态地分配了内存，最终都要释放这些内存以便他们能够被再用，否则，JavaScript的解释器将会消耗完系统中所有可用的内存，造成系统崩溃。垃圾回收过程是一个近似且不完美的方案，因为某块内存在是否还有用，属于“不可判定的”问题，意味着靠算法是解决不了的。")]),t._v(" "),a("p",[t._v("我们以函数中局部变量的正常生命周期函数为例。函数中的局部变量会在函数执行时存在。此时栈（或堆）内存会分配空间以保存相应的值。函数在内部使用了变量，然后退出。此时，就不再需要那个局部变量了，它占用的内存可以释放，供后面使用。这种情况下显然不再需要局部变量了，但并不是所有时候都会这么明显。垃圾回收程序必须跟踪记录哪个变量还会使用以及那个变量不会再使用，以便回收内存。如何标记为使用的变量也许有不同的实现方式：标记清理和引用计数")]),t._v(" "),a("h3",{attrs:{id:"标记清理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标记清理"}},[t._v("#")]),t._v(" 标记清理")]),t._v(" "),a("p",[t._v("在函数内部声明一个变量时，这个变量会被加上存在于上下文中的标记，当变量离开上下文时，会被加上离开上下文的标记。")]),t._v(" "),a("p",[t._v("给变量加标记的方式有很多种：")]),t._v(" "),a("ol",[a("li",[t._v("变量进入上下文时，反转某一位。")]),t._v(" "),a("li",[t._v("维护 在上下文中 和 不在上下文中 两个变量列表，可以把变量从一个列表转移到另一个列表。")])]),t._v(" "),a("p",[t._v("垃圾回收程序运行时，会标记内存中存储的所有变量。它会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉。在此之后再被加上标记的变量就是待删除的了，原因是任何在上下文中的变量都访问不到他们了。随后垃圾回收程序做一次内存清理，销毁带标记的所有制并收回他们的内存。")]),t._v(" "),a("p",[t._v("弊端：因为需要遍历所以肯定会暂用程序执行的时间，可能会导致程序假死。（现在v8引擎已经非常强了，就算使用标记清除也不会占用程序执行时间太长，超不过1秒）")]),t._v(" "),a("h3",{attrs:{id:"标记整理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标记整理"}},[t._v("#")]),t._v(" 标记整理")]),t._v(" "),a("p",[t._v("在标记清除时，清除数据后会导致清除的空间不再连续，下次存储数据时也是不连续的，所以在标记清除上增加了对内存空间的整理也就是(标记整理），解决了空间碎片化问题，其实就是标记清除的增强版")]),t._v(" "),a("h3",{attrs:{id:"引用计数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用计数"}},[t._v("#")]),t._v(" 引用计数")]),t._v(" "),a("p",[t._v("对每个值都记录它被引用的次数。声明变量并给它赋一个引用值时，这个值的引用数为1。如果同一个之又被赋给了另一个变量，那么引用数加1。类似地，如果保存对该值引用的变量被其他值给覆盖了，那么引用数减1.当一个值的引用数为0时，就说明没办法在访问到这个值了，因此可以安全的回收其内存了。垃圾回收程序下次运行的时候就会释放引用数为0的值的内存。")]),t._v(" "),a("p",[t._v("弊端：无法处理循环引用的对象，这是需要标记清除来处理")]),t._v(" "),a("h3",{attrs:{id:"分代回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分代回收"}},[t._v("#")]),t._v(" 分代回收")]),t._v(" "),a("p",[t._v("分代回收是将数据分类保存（新生代、老生代），多回收新生代，少回收老生代，减少每次需遍历的对象，从而减少每次GC的耗时。在新生代中经过一次GC后将新生代的数据晋升至老生代。（From和To都是新生代）")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-a34c08fbe480a22b62fa4273ef95c681_720w.png",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能"}},[t._v("#")]),t._v(" 性能")]),t._v(" "),a("p",[t._v("现代垃圾回收程序会基于对JavaScript运行时环境的探测来决定何时运行。探测机制因引擎而异，但基本上都是根据已分配对象的大小和数量来判断的。在一次完整的垃圾回收之后，V8的堆增长策略会根据活跃对象的数量外加一些余量来确定何时再次垃圾回收。")]),t._v(" "),a("p",[t._v("某些浏览器中是有可能（但不推荐）主动出发垃圾回收的。")]),t._v(" "),a("h3",{attrs:{id:"内存管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存管理"}},[t._v("#")]),t._v(" 内存管理")]),t._v(" "),a("p",[t._v("优化内存占用的最佳手段就是保证在执行代码时只保存必要的数据。如果数据不再必要，那么把它设置为null，从而使放弃引用。这也可以叫做解除引用。")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("通过const和let声明提升性能")]),t._v(" "),a("p",[t._v("因为const和let都以块（而非函数）为作用于，所以相比用var用这两个新关键字可能会更早地让垃圾回收程序介入，尽快回收应该回收的内存。")])]),t._v(" "),a("li",[a("p",[t._v("隐藏类和删除操作")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Article")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("title "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'this is title'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'this is text'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Article")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Article")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\na2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'person'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//V8会将创建的对象与隐藏类关联起来。V8引擎会在后台配置，让这两个实例共享相同的隐藏类，因为这两个实例共享同一个构造函数和原型，但如果后面给a2添加一个author的属性，此时两个Article示例就会对应两个不同的隐藏类。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" a2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//使用delete关键字会导致生成相同的隐藏类片段。即使两个实例使用同一个构造函数，他们也不再共享一个隐藏类。动态删除属性与动态添加属性导致的后果一样。最佳实践是把不想要的属性设置为null。这样可以保持隐藏类不变和继续共享。")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("内存泄漏")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Jake'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//意外声明全局变量是最常见但也最容易修复的内存泄漏问题")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Jake'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInterval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//定时器也可能会悄悄的导致内存泄漏，定时器的回调通过闭包引用了外部变量")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("outer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Jake'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//使用JavaScript闭包很容易在不知不觉间造成内存泄漏")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("静态分配与对象池")]),t._v(" "),a("p",[t._v("如果能够合理使用分配内存，同时避免多余的垃圾回收，就可以保住因释放内存而损失的性能。")]),t._v(" "),a("p",[t._v("浏览器决定何时运行垃圾回收程序的一个标准就是对象更替的速度。如果有很多对象被初始化，然后一下子有又都超出了作用域，那么浏览器会采用更激进的方式跳读垃圾回收程序运行，这样当然会影响性能。")])])]),t._v(" "),a("h3",{attrs:{id:"减少垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#减少垃圾回收"}},[t._v("#")]),t._v(" 减少垃圾回收")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("对象object优化")]),t._v(" "),a("p",[t._v("为了最大限度的实现对象的重用，应该像避使用new语句一样来避免使用{}来新建对象。")]),t._v(" "),a("p",[t._v("常常使用对象作为方法的返回值会导致过多的内存创建，最好是在每一次函数调用完成之后，将需要返回的数据放入一个全局的对象中，并返回此全局对象。但是这就意味着每一次方法调用都会导致全局对象内容的修改，有可能会导致错误的发生。因此，一定要对全局对象的使用进行详细的注释和说明。")]),t._v(" "),a("p",[t._v("有些时候可以清空对象，再添加新属性就可以达到重复利用对象的目的。")])]),t._v(" "),a("li",[a("p",[t._v("数组array优化")]),t._v(" "),a("p",[t._v("将[]赋值给一个数组对象，是清空数组的捷径（例如：arr = []）但是需要注意的是，这种方式又创建了一个新的空对象，并且将原来的数组对象变成了一小片内存垃圾。实际上将数组长度赋值为0（arr.length = 0）也能达到清空数组的目的，并且同时能实现数组重用，减少内存垃圾的产生。")])]),t._v(" "),a("li",[a("p",[t._v("方法function优化")]),t._v(" "),a("p",[t._v("关于setTimeout中的匿名方法每次调用都会创建一个新的方法对象，这就会导致了大量的方法对象垃圾。为了解决这个问题，可以把这个方法先作为返回值的方法保存起来。")])]),t._v(" "),a("li",[a("p",[t._v("显然，重写大量的库函数是非常痛苦的，因此你必须仔细权衡方法的易用性和内存垃圾产生情况。如果产生大量内存垃圾的方法在动画的每一帧中被多次调用，你可能就会兴高采烈的重写库函数啦。")]),t._v(" "),a("p",[t._v("在递归函数中，通过{}构造空对象，并在递归过程中传递数据，虽然是很方便的。但是更好的方式是：利用一个单独的数组对象作为堆栈，在递归过程中对数组进行push和pop操作。更进一步，不要调用array的pop方法（pop将会使得array的最后一个元素将会变成内存垃圾），而应该使用一个索引来记录数组的最后一个元素的位置，在pop时简单的将索引减一即可；类似的，将索引加1来代替array的push操作，只有当索引对应的元素不存在时，才执行真正的push为数组加入一个新元素。")]),t._v(" "),a("p",[t._v("另外，在任何时候，都应该避免使用向量对象（例如：包含x和y属性的vector2对象）。有些方法将向量对象作为方法返回值，既可以支持返回值的再次修改，又能够将需要的属性一次性返回，使用起来非常方便。但是有时候在一帧动画中，创建了成百上千个这样的向量对象，从而导致严重的垃圾回收性能问题，也是非常常见的。因此最好将这些方法分离成具有独立职责的功能个体，例如：利用getX()和getY()方法（返回具体数据）代替getPosition()方法（返回一个vector2对象）。")])])]),t._v(" "),a("p",[t._v("参考资料：")]),t._v(" "),a("p",[t._v("JavaScript高级程序设计（第4版）")]),t._v(" "),a("p",[t._v("https://www.cnblogs.com/zhwl/p/4664604.html")]),t._v(" "),a("p",[t._v("https://www.jb51.net/article/75292.htm")]),t._v(" "),a("p",[t._v("https://zhuanlan.zhihu.com/p/261419516")])])}),[],!1,null,null,null);s.default=e.exports}}]);